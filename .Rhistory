# gpava(c(-1,-1,-1),c(-1,0,0),solver = weighted.median,ties = "secondary")
# the following step replaces y values with the respective quantile in case of ties
y = unlist(lapply(split(y,x),function(y) rep(quantile(y,alpha,type = 1),length(y))),use.names = FALSE)
return(gpava(x,y,solver = weighted.fractile,p = alpha,ties = "secondary")$x)
}
score = function(x,y) mean(2*(as.numeric(x >= y) - alpha)*(x-y))
marg = function(x) quantile(x,alpha,type = 1)
identif = function(x,y) as.numeric(x > y) - alpha
if(is.null(xlab)) xlab = bquote(x == q[.(alpha)](F))
score_label = "QS "
}
else stop("type must be \"mean\" or list(\"quantile\",level)")
}
if(is.null(lim)){
lim = range(x) + c(-1,1)*max(abs(range(x)))*0.2
}
if(is.null(ylab)) ylab = expression(hat(x)[rc])
plot(NULL,xlim = lim,ylim = lim,main = main,xlab = "",ylab = ylab)
mtext(xlab,side = 1,line = par()$mgp[1],cex = par()$cex,adj = adj_xlab)
ord_x = order(x)
x = x[ord_x]
y = y[ord_x]
x_rc = pava(x,y)
# We encountered suboptimal solutions for quantiles in rare cases, e.g.,
# gpava(c(3,3,2,1,1),1:5,solver = weighted.fractile,p = 0.75, ties = "secondary")
# which led to slightly negative DSC components
# applying gpava a second time seems to fix this:
if(type[[1]] == "quantile"){
x_rc2 = pava(x_rc,y)
if(!all(x_rc == x_rc2)){
warning("Encountered multiple gpava solutions...")
x_rc = x_rc2
}
}
res = y - x
# score decomposition
s = score(x,y)
c_rc_ucond = optim(par = 0,fn = function(c) score(x+c,y),method = "Brent",lower = min(res),upper = max(res))$par
s_rc_ucond = score(x + c_rc_ucond,y)
s_rc = score(x_rc,y)
s_mg = score(marg(y),y)
mcb = s - s_rc
umcb = s - s_rc_ucond
cmcb = s_rc_ucond - s_rc
dsc = s_mg - s_rc
unc = s_mg
# compute p-value for hypothesis of unconditional calibration (t-test)
v = identif(x,y)
t = sqrt(length(v)) * mean(v)/sd(v)
pval_ucond = 1 - abs(pt(t,length(v)-1) - 0.5)*2
if(resampling){
low = floor(n_resamples * (1-region_level)/2)
up = n_resamples - low
resamples = sapply(1:n_resamples,function(i) x + sample(res,length(y),replace = replace))
x_rc_resamples = apply(resamples, 2, function(y) pava(x,y))
x_rc_resamples_sorted = apply(x_rc_resamples,1,sort) - marg(res)
ran_x = range(x)
polygon(c(ran_x[1],x,ran_x[2],rev(x),ran_x[1]),
c(ran_x[1],x_rc_resamples_sorted[up,],ran_x[2],rev(x_rc_resamples_sorted[low,]),ran_x[1]),
border = NA,col = "lightblue1")
points(x,x_rc_resamples_sorted[low,],type = "l",lty = 1,col = "lightblue2")
points(x,x_rc_resamples_sorted[up,],type = "l",lty = 1,col = "lightblue2")
box()
# compute Monte-Carlo p-value (for hypothesis of conditional calibration)
mcb_resamples = sapply(1:n_resamples,function(i) score(x,resamples[,i]) - score(x_rc_resamples[,i],resamples[,i]))
mcb_bounds = sort(c(mcb,mcb_resamples))[c(low,up)]
rank_obs = tail(rank(c(mcb_resamples,mcb)),1)
pval = 1 - (rank_obs - 1)/(n_resamples + 1)
}
text_pos = legend("topleft",legend = parse(text = c(score_label,expression(MCB[u]),expression(MCB[c]),"DSC","UNC")),plot = FALSE)
text(x = lim[1],y = text_pos$text$y,parse(text = c(score_label,expression(MCB[u]),expression(MCB[c]),"DSC","UNC")),adj = c(0,0.5))
text(x = 0.8*lim[1] + 0.2*lim[2],y = text_pos$text$y,
bquote(.(format(round(c(s,umcb,cmcb,dsc,unc),digits = digits)),nsmall = digits)),
adj = c(0,0.5))
abline(a = 0,b = 1,col = "grey",lty = 2)
points(x,x_rc,type = "l")
if(scatter_plot){
points(x,y,pch = 20,col = adjustcolor("black",alpha = 0.25),cex = 0.5)
}
if(inset_hist){
a = par("usr")
a = c(grconvertX(a[1:2], "user", "ndc"),grconvertY(a[3:4], "user", "ndc"))
par.old = par(fig = c(0.3*a[1] + 0.7*a[2],0.05*a[1] + 0.95*a[2],0.9*a[3] + 0.1*a[4],0.65*a[3] + 0.35*a[4]),
pty = "m",mar = c(1,0,0,0),mgp = c(1,0.4,0),tcl = -0.25,new = TRUE)
plot(hist(x,breaks = hist.breaks,main = "",yaxt = "n",xlab = "",ylab = "",xlim = lim),add = TRUE)
par(par.old)
}
return(list(x = x,y = y,res = res,x_rc = x_rc,
decomp = c(umcb,cmcb,mcb,dsc,unc),
pval_u = pval_ucond,pval_c = if(resampling) pval else NA))
}
mdu_quant = mdu_quant(0.75)
dev.off()
dev.off()
dev.off()
dev.off()
mdu_quant = function(alpha){
mdu = sapply(0:6,function(lag){
data_eval = data_at_lag(lag)
return(reldiag(data_eval$fcast$quant(alpha),data_eval$y,type = list("quantile",alpha),resampling = FALSE)$MDU)
})
return(cbind(mdu[3,] - mdu[4,] + mdu[5,],t(mdu[3:5,]),(mdu[4,]-mdu[3,])/mdu[5,],mdu[1,]))
}
mdu_quant = mdu_quant(0.75)
mdu_quant = function(alpha){
mdu = sapply(0:6,function(lag){
data_eval = data_at_lag(lag)
return(reldiag(data_eval$fcast$quant(alpha),data_eval$y,type = list("quantile",alpha),resampling = FALSE)$decomp)
})
return(cbind(mdu[3,] - mdu[4,] + mdu[5,],t(mdu[3:5,]),(mdu[4,]-mdu[3,])/mdu[5,],mdu[1,]))
}
mdu_quant = mdu_quant(0.75)
mdu_thresh = function(t = 2){
mdu = sapply(0:6,function(lag){
data_eval = data_at_lag(lag)
return(threshreldiag(data_eval$fcast,data_eval$y,t,resampling = FALSE)$decomp)
})
return(cbind(mdu[1,] - mdu[2,] + mdu[3,],t(mdu),(mdu[2,]-mdu[1,])/mdu[3,]))
}
decomp_quant = function(alpha){
mdu = sapply(0:6,function(lag){
data_eval = data_at_lag(lag)
return(reldiag(data_eval$fcast$quant(alpha),data_eval$y,type = list("quantile",alpha),resampling = FALSE)$decomp)
})
return(cbind(mdu[3,] - mdu[4,] + mdu[5,],t(mdu[3:5,]),(mdu[4,]-mdu[3,])/mdu[5,],mdu[1,]))
}
decomp_quant = decomp_quant(0.75)
decomp_thresh = function(t = 2){
mdu = sapply(0:6,function(lag){
data_eval = data_at_lag(lag)
return(threshreldiag(data_eval$fcast,data_eval$y,t,resampling = FALSE)$decomp)
})
return(cbind(mdu[1,] - mdu[2,] + mdu[3,],t(mdu),(mdu[2,]-mdu[1,])/mdu[3,]))
}
decomp_thresh = decomp_thresh()
# Figure 6
plot_fig6 = function(file,width = 5,height = 2.7){
x = c(1,2,4,6,8,10,11,12,14)
y = c(4,5,6,9,10,11,13,8,15)
olsreg = lm(y~x)
require(quantreg)
medreg = rq(y~x)
m1_rc = isoreg(y~x)
rep(0.01 * c(0.5,-0.5,1.5,-1.5),each = 7)
# Isotonic Median Regression
require(isotone)
med_rc = gpava(x,y,solver = weighted.median)$x
med_rc_up = med_rc
med_rc_up[7:8] = 13
pdf(file = paste0(figs_path,file),width = width,height = height)
# plotting adjustments:
m1_rc_y = m1_rc$yf + rep(-0.05,length(x))
med_rc = med_rc + rep(0.05,length(x))
med_rc_up = med_rc_up + rep(0.05,length(x))
par(pty = "s",mai = mai_def + c(0,0,0,2.2),mgp = mgp_def,lwd = lwd_def,cex = cex_def,cex.main = cex.main_def)
plot(x,y,xlim = c(0,15),ylim = c(2,17),xlab = "x",ylab = "y")
polygon(c(x[6:9],x[8:7]),c(med_rc_up[6:9],med_rc[8:7]),col = adjustcolor("green",alpha = 0.15),border = NA)
abline(olsreg$coefficients,col = "blue")
abline(medreg$coefficients,col = "green")
points(x, med_rc,type = "l",col = "green",lty = 2)
points(x, med_rc_up,type = "l",col = "green",lty = 2)
points(x,m1_rc_y,type = "l",col = "blue",lty = 2)
par(xpd = TRUE)
coeff_det = function(x,type = "mean"){
mse = function(x,y) sum((x-y)^2)/length(y)
mae = function(x,y) sum(abs(x-y))/length(y)
if(type == "mean"){
x_rc = m1_rc$yf
score = mse
}
else if(type == "median"){
x_rc = med_rc
score = mae
}
else stop("type must be mean or median!")
mean_score = score(x,y)
mean_score_rc = score(x_rc,y)
mean_score_mg = score(mean(y),y)
return((mean_score_mg - mean_score)/mean_score_mg)
}
legend("bottomright", inset = c(-1,0),
legend = c("Linear mean regression",
as.expression(bquote(list(R^2 == .(format(round(coeff_det(olsreg$fitted.values),3),nsmall = 3)),
R^1 == .(format(round(coeff_det(olsreg$fitted.values,"median"),3),nsmall = 3))))),
"Linear median regression",
as.expression(bquote(list(R^2 == .(format(round(coeff_det(medreg$fitted.values),3),nsmall = 3)),
R^1 == .(format(round(coeff_det(medreg$fitted.values,"median"),3),nsmall = 3))))),
"Isotonic mean regression","Isotonic median regression"),
col = c("blue","green")[c(1,NA,2,NA,1,2)],lty = c(1,NA,1,NA,2,2),bg = "white")
dev.off()
}
plot_fig6("fig6.pdf")
# Figure 6
plot_fig6 = function(file,width = 5,height = 2.7){
x = c(1,2,4,6,8,10,11,12,14)
y = c(4,5,6,9,10,11,13,8,15)
olsreg = lm(y~x)
require(quantreg)
medreg = rq(y~x)
m1_rc = isoreg(y~x)
rep(0.01 * c(0.5,-0.5,1.5,-1.5),each = 7)
# Isotonic Median Regression
require(isotone)
med_rc = gpava(x,y,solver = weighted.median)$x
med_rc_up = med_rc
med_rc_up[7:8] = 13
pdf(file = paste0(figs_path,file),width = width,height = height)
# plotting adjustments:
m1_rc_y = m1_rc$yf + rep(-0.05,length(x))
med_rc = med_rc + rep(0.05,length(x))
med_rc_up = med_rc_up + rep(0.05,length(x))
par(pty = "s",mai = mai_def + c(0,0,0,2.2),mgp = mgp_def,lwd = lwd_def,cex = cex_def,cex.main = cex.main_def)
plot(x,y,xlim = c(0,15),ylim = c(2,17),xlab = "x",ylab = "y")
polygon(c(x[6:9],x[8:7]),c(med_rc_up[6:9],med_rc[8:7]),col = adjustcolor("green",alpha = 0.15),border = NA)
abline(olsreg$coefficients,col = "blue")
abline(medreg$coefficients,col = "green")
points(x, med_rc,type = "l",col = "green",lty = 2)
points(x, med_rc_up,type = "l",col = "green",lty = 2)
points(x,m1_rc_y,type = "l",col = "blue",lty = 2)
par(xpd = TRUE)
coeff_det = function(x,type = "mean"){
mse = function(x,y) sum((x-y)^2)/length(y)
mae = function(x,y) sum(abs(x-y))/length(y)
if(type == "mean"){
x_rc = m1_rc$yf
score = mse
}
else if(type == "median"){
x_rc = med_rc
score = mae
}
else stop("type must be mean or median!")
mean_score = score(x,y)
mean_score_rc = score(x_rc,y)
mean_score_mg = score(mean(y),y)
return((mean_score_mg - mean_score)/mean_score_mg)
}
legend("bottomright", inset = c(-0.9,0),
legend = c("Linear mean regression",
as.expression(bquote(list(R^2 == .(format(round(coeff_det(olsreg$fitted.values),3),nsmall = 3)),
R^1 == .(format(round(coeff_det(olsreg$fitted.values,"median"),3),nsmall = 3))))),
"Linear median regression",
as.expression(bquote(list(R^2 == .(format(round(coeff_det(medreg$fitted.values),3),nsmall = 3)),
R^1 == .(format(round(coeff_det(medreg$fitted.values,"median"),3),nsmall = 3))))),
"Isotonic mean regression","Isotonic median regression"),
col = c("blue","green")[c(1,NA,2,NA,1,2)],lty = c(1,NA,1,NA,2,2),bg = "white")
dev.off()
}
plot_fig6("fig6.pdf")
# Figure 6
plot_fig6 = function(file,width = 5,height = 2.7){
x = c(1,2,4,6,8,10,11,12,14)
y = c(4,5,6,9,10,11,13,8,15)
olsreg = lm(y~x)
require(quantreg)
medreg = rq(y~x)
m1_rc = isoreg(y~x)
rep(0.01 * c(0.5,-0.5,1.5,-1.5),each = 7)
# Isotonic Median Regression
require(isotone)
med_rc = gpava(x,y,solver = weighted.median)$x
med_rc_up = med_rc
med_rc_up[7:8] = 13
pdf(file = paste0(figs_path,file),width = width,height = height)
# plotting adjustments:
m1_rc_y = m1_rc$yf + rep(-0.05,length(x))
med_rc = med_rc + rep(0.05,length(x))
med_rc_up = med_rc_up + rep(0.05,length(x))
par(pty = "s",mai = mai_def + c(0,0,0,2.2),mgp = mgp_def,lwd = lwd_def,cex = cex_def,cex.main = cex.main_def)
plot(x,y,xlim = c(0,15),ylim = c(2,17),xlab = "x",ylab = "y")
polygon(c(x[6:9],x[8:7]),c(med_rc_up[6:9],med_rc[8:7]),col = adjustcolor("green",alpha = 0.15),border = NA)
abline(olsreg$coefficients,col = "blue")
abline(medreg$coefficients,col = "green")
points(x, med_rc,type = "l",col = "green",lty = 2)
points(x, med_rc_up,type = "l",col = "green",lty = 2)
points(x,m1_rc_y,type = "l",col = "blue",lty = 2)
par(xpd = TRUE)
coeff_det = function(x,type = "mean"){
mse = function(x,y) sum((x-y)^2)/length(y)
mae = function(x,y) sum(abs(x-y))/length(y)
if(type == "mean"){
x_rc = m1_rc$yf
score = mse
}
else if(type == "median"){
x_rc = med_rc
score = mae
}
else stop("type must be mean or median!")
mean_score = score(x,y)
mean_score_rc = score(x_rc,y)
mean_score_mg = score(mean(y),y)
return((mean_score_mg - mean_score)/mean_score_mg)
}
legend("bottomright", inset = c(-0.6,0),
legend = c("Linear mean regression",
as.expression(bquote(list(R^2 == .(format(round(coeff_det(olsreg$fitted.values),3),nsmall = 3)),
R^1 == .(format(round(coeff_det(olsreg$fitted.values,"median"),3),nsmall = 3))))),
"Linear median regression",
as.expression(bquote(list(R^2 == .(format(round(coeff_det(medreg$fitted.values),3),nsmall = 3)),
R^1 == .(format(round(coeff_det(medreg$fitted.values,"median"),3),nsmall = 3))))),
"Isotonic mean regression","Isotonic median regression"),
col = c("blue","green")[c(1,NA,2,NA,1,2)],lty = c(1,NA,1,NA,2,2),bg = "white")
dev.off()
}
plot_fig6("fig6.pdf")
# Figure 6
plot_fig6 = function(file,width = 5,height = 2.7){
x = c(1,2,4,6,8,10,11,12,14)
y = c(4,5,6,9,10,11,13,8,15)
olsreg = lm(y~x)
require(quantreg)
medreg = rq(y~x)
m1_rc = isoreg(y~x)
rep(0.01 * c(0.5,-0.5,1.5,-1.5),each = 7)
# Isotonic Median Regression
require(isotone)
med_rc = gpava(x,y,solver = weighted.median)$x
med_rc_up = med_rc
med_rc_up[7:8] = 13
pdf(file = paste0(figs_path,file),width = width,height = height)
# plotting adjustments:
m1_rc_y = m1_rc$yf + rep(-0.05,length(x))
med_rc = med_rc + rep(0.05,length(x))
med_rc_up = med_rc_up + rep(0.05,length(x))
par(pty = "s",mai = mai_def + c(0,0,0,2.2),mgp = mgp_def,lwd = lwd_def,cex = cex_def,cex.main = cex.main_def)
plot(x,y,xlim = c(0,15),ylim = c(2,17),xlab = "x",ylab = "y")
polygon(c(x[6:9],x[8:7]),c(med_rc_up[6:9],med_rc[8:7]),col = adjustcolor("green",alpha = 0.15),border = NA)
abline(olsreg$coefficients,col = "blue")
abline(medreg$coefficients,col = "green")
points(x, med_rc,type = "l",col = "green",lty = 2)
points(x, med_rc_up,type = "l",col = "green",lty = 2)
points(x,m1_rc_y,type = "l",col = "blue",lty = 2)
par(xpd = TRUE)
coeff_det = function(x,type = "mean"){
mse = function(x,y) sum((x-y)^2)/length(y)
mae = function(x,y) sum(abs(x-y))/length(y)
if(type == "mean"){
x_rc = m1_rc$yf
score = mse
}
else if(type == "median"){
x_rc = med_rc
score = mae
}
else stop("type must be mean or median!")
mean_score = score(x,y)
mean_score_rc = score(x_rc,y)
mean_score_mg = score(mean(y),y)
return((mean_score_mg - mean_score)/mean_score_mg)
}
legend("bottomright", inset = c(-0.7,0),
legend = c("Linear mean regression",
as.expression(bquote(list(R^2 == .(format(round(coeff_det(olsreg$fitted.values),3),nsmall = 3)),
R^1 == .(format(round(coeff_det(olsreg$fitted.values,"median"),3),nsmall = 3))))),
"Linear median regression",
as.expression(bquote(list(R^2 == .(format(round(coeff_det(medreg$fitted.values),3),nsmall = 3)),
R^1 == .(format(round(coeff_det(medreg$fitted.values,"median"),3),nsmall = 3))))),
"Isotonic mean regression","Isotonic median regression"),
col = c("blue","green")[c(1,NA,2,NA,1,2)],lty = c(1,NA,1,NA,2,2),bg = "white")
dev.off()
}
plot_fig6("fig6.pdf")
# Figure 6
plot_fig6 = function(file,width = 5,height = 2.7){
x = c(1,2,4,6,8,10,11,12,14)
y = c(4,5,6,9,10,11,13,8,15)
olsreg = lm(y~x)
require(quantreg)
medreg = rq(y~x)
m1_rc = isoreg(y~x)
rep(0.01 * c(0.5,-0.5,1.5,-1.5),each = 7)
# Isotonic Median Regression
require(isotone)
med_rc = gpava(x,y,solver = weighted.median)$x
med_rc_up = med_rc
med_rc_up[7:8] = 13
pdf(file = paste0(figs_path,file),width = width,height = height)
# plotting adjustments:
m1_rc_y = m1_rc$yf + rep(-0.05,length(x))
med_rc = med_rc + rep(0.05,length(x))
med_rc_up = med_rc_up + rep(0.05,length(x))
par(pty = "s",mai = mai_def + c(0,0,0,2.2),mgp = mgp_def,lwd = lwd_def,cex = cex_def,cex.main = cex.main_def)
plot(x,y,xlim = c(0,15),ylim = c(2,17),xlab = "x",ylab = "y")
polygon(c(x[6:9],x[8:7]),c(med_rc_up[6:9],med_rc[8:7]),col = adjustcolor("green",alpha = 0.15),border = NA)
abline(olsreg$coefficients,col = "blue")
abline(medreg$coefficients,col = "green")
points(x, med_rc,type = "l",col = "green",lty = 2)
points(x, med_rc_up,type = "l",col = "green",lty = 2)
points(x,m1_rc_y,type = "l",col = "blue",lty = 2)
par(xpd = TRUE)
coeff_det = function(x,type = "mean"){
mse = function(x,y) sum((x-y)^2)/length(y)
mae = function(x,y) sum(abs(x-y))/length(y)
if(type == "mean"){
x_rc = m1_rc$yf
score = mse
}
else if(type == "median"){
x_rc = med_rc
score = mae
}
else stop("type must be mean or median!")
mean_score = score(x,y)
mean_score_rc = score(x_rc,y)
mean_score_mg = score(mean(y),y)
return((mean_score_mg - mean_score)/mean_score_mg)
}
legend("bottomright", inset = c(-0.8,0),
legend = c("Linear mean regression",
as.expression(bquote(list(R^2 == .(format(round(coeff_det(olsreg$fitted.values),3),nsmall = 3)),
R^1 == .(format(round(coeff_det(olsreg$fitted.values,"median"),3),nsmall = 3))))),
"Linear median regression",
as.expression(bquote(list(R^2 == .(format(round(coeff_det(medreg$fitted.values),3),nsmall = 3)),
R^1 == .(format(round(coeff_det(medreg$fitted.values,"median"),3),nsmall = 3))))),
"Isotonic mean regression","Isotonic median regression"),
col = c("blue","green")[c(1,NA,2,NA,1,2)],lty = c(1,NA,1,NA,2,2),bg = "white")
dev.off()
}
plot_fig6("fig6.pdf")
# Figure 9
plot_fig9 = function(mdu,label_score = "MSE",file,width,height,
mai = mai_def,main = "",show_MCBu = FALSE,...){
pdf(file = paste0(figs_path,file),width = width,height = height)
layout(matrix(c(1,2),nrow = 2),heights = c(2, 1))
par(pty = "m",mai = mai,mgp = mgp_def,lwd = lwd_def,cex = cex_def,cex.main = cex.main_def)
cols = c("black","red","green","blue","black")
lags = 0:6
layout(matrix(c(1,2),nrow = 2),heights = c(2, 1))
par(pty = "m",mai = c(0,mai[2:4]),mgp = mgp_def,lwd = lwd_def,cex = cex_def,cex.main = cex.main_def)
if(show_MCBu) ylim = c(0,1.3*max(mdu[,1:4]))
else ylim = c(0,1.3*max(mdu[,1:4]))
matplot(lags,mdu[,1:4],type = "b",
pch = 4,col = cols[1:4],lty = rep(1,4),ylim = ylim, xaxt = "n", xlab = "",ylab = "")
if(show_MCBu) points(lags,mdu[,6],type = "b",pch = 4,col = "red",lty = 2)
abline(h = 0,col = "grey",lty = 2)
if(show_MCBu) legend("topleft",legend = parse(text = c(label_score,"MCB","DSC",expression(MCB[u]),"UNC")),lty = c(1,1,1,2,1),col = c(cols[c(1,2,3,2,4)]),ncol = 3,bg = 'white')
else legend("topleft",legend = c(label_score,"MCB","DSC$","UNC"),lty = 1,col = cols[1:4],ncol = 2,bg = 'white')
title(main = main,line = 1)
par(pty = "m",mai = c(mai[1:2],0.05,mai[4]),mgp = mgp,lwd = lwd,cex.main = 1.5)
plot(lags,mdu[,5],type = "b",ylim = c(-0.5,1),
pch = 4,col = cols[5],lty = 2,xlab = "lead time",ylab = "")
abline(h = 0,col = "grey",lty = 2)
legend("topright",legend = expression(R^~"*"),lty = 2,col = cols[5])
dev.off()
}
data_at_lag = process_data_CPI(raw_fcasts,raw_obs)
decomp_quant = function(alpha){
mdu = sapply(0:6,function(lag){
data_eval = data_at_lag(lag)
return(reldiag(data_eval$fcast$quant(alpha),data_eval$y,type = list("quantile",alpha),resampling = FALSE)$decomp)
})
return(cbind(mdu[3,] - mdu[4,] + mdu[5,],t(mdu[3:5,]),(mdu[4,]-mdu[3,])/mdu[5,],mdu[1,]))
}
decomp_quant = decomp_quant(0.75)
decomp_thresh = function(t = 2){
mdu = sapply(0:6,function(lag){
data_eval = data_at_lag(lag)
return(threshreldiag(data_eval$fcast,data_eval$y,t,resampling = FALSE)$decomp)
})
return(cbind(mdu[1,] - mdu[2,] + mdu[3,],t(mdu),(mdu[2,]-mdu[1,])/mdu[3,]))
}
decomp_thresh = decomp_thresh()
plot_fig9(decomp_thresh,"BS","fig9a.pdf",width = 4,height = 3.45,
mai = mai_def + c(0,0,0.45,0),mgp = c(-1.2,0.8,0),main = "Threshold")
# Figure 9
plot_fig9 = function(mdu,label_score = "MSE",file,width,height,
mai = mai_def,main = "",show_MCBu = FALSE,...){
pdf(file = paste0(figs_path,file),width = width,height = height)
layout(matrix(c(1,2),nrow = 2),heights = c(2, 1))
par(pty = "m",mai = mai,mgp = mgp_def,lwd = lwd_def,cex = cex_def,cex.main = cex.main_def)
cols = c("black","red","green","blue","black")
lags = 0:6
layout(matrix(c(1,2),nrow = 2),heights = c(2, 1))
par(pty = "m",mai = c(0,mai[2:4]),mgp = mgp_def,lwd = lwd_def,cex = cex_def,cex.main = cex.main_def)
if(show_MCBu) ylim = c(0,1.3*max(mdu[,1:4]))
else ylim = c(0,1.3*max(mdu[,1:4]))
matplot(lags,mdu[,1:4],type = "b",
pch = 4,col = cols[1:4],lty = rep(1,4),ylim = ylim, xaxt = "n", xlab = "",ylab = "")
if(show_MCBu) points(lags,mdu[,6],type = "b",pch = 4,col = "red",lty = 2)
abline(h = 0,col = "grey",lty = 2)
if(show_MCBu) legend("topleft",legend = parse(text = c(label_score,"MCB","DSC",expression(MCB[u]),"UNC")),lty = c(1,1,1,2,1),col = c(cols[c(1,2,3,2,4)]),ncol = 3,bg = 'white')
else legend("topleft",legend = c(label_score,"MCB","DSC$","UNC"),lty = 1,col = cols[1:4],ncol = 2,bg = 'white')
title(main = main,line = 1)
par(pty = "m",mai = c(mai[1:2],0.05,mai[4]),mgp = mgp_def,lwd = lwd_def,cex = cex_def,cex.main = cex.main_def)
plot(lags,mdu[,5],type = "b",ylim = c(-0.5,1),
pch = 4,col = cols[5],lty = 2,xlab = "lead time",ylab = "")
abline(h = 0,col = "grey",lty = 2)
legend("topright",legend = expression(R^~"*"),lty = 2,col = cols[5])
dev.off()
}
data_at_lag = process_data_CPI(raw_fcasts,raw_obs)
decomp_quant = function(alpha){
mdu = sapply(0:6,function(lag){
data_eval = data_at_lag(lag)
return(reldiag(data_eval$fcast$quant(alpha),data_eval$y,type = list("quantile",alpha),resampling = FALSE)$decomp)
})
return(cbind(mdu[3,] - mdu[4,] + mdu[5,],t(mdu[3:5,]),(mdu[4,]-mdu[3,])/mdu[5,],mdu[1,]))
}
decomp_quant = decomp_quant(0.75)
decomp_thresh = function(t = 2){
mdu = sapply(0:6,function(lag){
data_eval = data_at_lag(lag)
return(threshreldiag(data_eval$fcast,data_eval$y,t,resampling = FALSE)$decomp)
})
return(cbind(mdu[1,] - mdu[2,] + mdu[3,],t(mdu),(mdu[2,]-mdu[1,])/mdu[3,]))
}
decomp_thresh = decomp_thresh()
plot_fig9(decomp_thresh,"BS","fig9a.pdf",width = 4,height = 3.45,
mai = mai_def + c(0,0,0.45,0),mgp = c(-1.2,0.8,0),main = "Threshold")
plot_fig9(decomp_quant,"QS","fig9b.pdf",width = 4,height = 3.45,
mai = mai_def + c(0,0,0.45,0),mgp = c(-1.2,0.8,0),main = "Quantile",show_MCBu = TRUE)
